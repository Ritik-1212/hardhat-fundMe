{
  "language": "Solidity",
  "sources": {
    "contracts/fundMe.sol": {
      "content": "//SPDX-License-Identifier : MIT\npragma solidity ^0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./priceConverter.sol\";\n\nerror notOwner();\n\ncontract fundMe {\n    using priceConverter for uint256;\n    mapping(address => uint256) public nameToValue;\n    address[] public funders;\n    address public i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(AggregatorV3Interface priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getPriceConverter(priceFeed) >= MINIMUM_USD,\n            \"need to add more ETH\"\n        );\n        nameToValue[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert notOwner();\n        _;\n    }\n\n    function withDraw() public onlyOwner {\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            nameToValue[funder] = 0;\n        }\n        funders = new address[](0);\n\n        // // transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/priceConverter.sol": {
      "content": "//SPDX-License-Identifier : MIT\n\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary priceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n        // or (Both will do the same thing)\n        // return uint256(answer * 1e10); // 1* 10 **\n    }\n\n    function getPriceConverter(uint256 price, AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 priceget = getPrice(priceFeed);\n        uint256 convertedPrice = ((price * priceget) / 1000000000000000000);\n        return convertedPrice;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}